# slurm.conf file generated by configurator.html.
# Put this file on all nodes of your cluster.
# See the slurm.conf man page for more information.

ClusterName=gizmo
ControlMachine=gadget
#ControlAddr=
#BackupController=
#BackupAddr=

AuthType=auth/munge
CacheGroups=0
CryptoType=crypto/munge
DisableRootJobs=YES
#EnforcePartLimits=NO

CheckpointType=checkpoint/none
JobCheckpointDir=/var/spool/slurm-llnl/checkpoint

Prolog=/etc/slurm-llnl/slurmd.prolog
Epilog=/etc/slurm-llnl/slurmd.epilog

TaskProlog=/etc/slurm-llnl/task.prolog.sh
#TaskEpilog unset 

#PrologSlurmctld unset 
#EpilogSlurmctld unset 

FirstJobID=27072384
#GresTypes=
GroupUpdateForce=600
#GroupUpdateTime=600
#JobFileAppend=0
JobRequeue=0
JobSubmitPlugins=default_account,default_qos
#KillOnBadExit=0
#Licenses=foo*4,bar
#MailProg=/bin/mail
MaxJobCount=15000
#MaxTasksPerNode=128
MpiDefault=openmpi
MpiParams=ports=12000-12999
#PluginDir=
#PlugStackConfig unset 
#PrivateData=jobs
ProctrackType=proctrack/linuxproc
#PropagatePrioProcess=0
PropagateResourceLimits=NONE
#PropagateResourceLimitsExcept=
ReturnToService=2
#SallocDefaultCommand=

SlurmctldPidFile=/run/slurm-llnl/slurmctld.pid
SlurmctldPort=6817

# Use "%n" with multiple nodes per host
SlurmdPidFile=/run/slurm-llnl/slurmd.%n.pid
SlurmdPort=6818
SlurmdSpoolDir=/var/tmp/slurmd

SlurmUser=slurm
#SrunEpilog=
#SrunProlog=
StateSaveLocation=/var/spool/slurm-llnl/state
SwitchType=switch/none
TaskPlugin=task/none
#TaskPluginParam=
#TopologyPlugin=topology/tree
TmpFs=/loc
#TrackWCKey=no
#TreeWidth=
#UnkillableStepProgram=
#UsePAM=0
#
# TIMERS
#BatchStartTimeout=10
#CompleteWait=0
#EpilogMsgTime=2000
#GetEnvTimeout=2
#HealthCheckInterval=0
#HealthCheckProgram=
InactiveLimit=0
KillWait=30
MessageTimeout=45
#ResvOverRun=0
MinJobAge=300
OverTimeLimit=2160

SlurmctldTimeout=2000
SlurmdTimeout=2000
#UnkillableStepTimeout=60
#VSizeFactor=0
Waittime=0
#
# SCHEDULING
#DefMemPerCPU=0
#MaxMemPerCPU=0
#SchedulerRootFilter=1
#SchedulerTimeSlice=30
# FastSchedule=2 for testing purposes only
FastSchedule=0
#
SchedulerType=sched/backfill
SchedulerParameters=bf_max_job_user=10,defer,bf_resolution=360,bf_window=10080,bf_continue,

SelectType=select/cons_res
SelectTypeParameters=CR_Core

PreemptMode=REQUEUE
PreemptType=preempt/qos

#
# JOB PRIORITY
PriorityType=priority/multifactor
PriorityDecayHalfLife=1-00:00:00
#PriorityCalcPeriod unset 
#PriorityFavorSmall unset 
PriorityMaxAge=1-00:00:00
#PriorityUsageResetPeriod unset 
PriorityWeightAge=10
PriorityWeightFairshare=100000000
#PriorityWeightPartition unset 
#PriorityWeightJobSize unset 
PriorityWeightQOS=1000000
#
# LOGGING AND ACCOUNTING
AccountingStorageEnforce=limits,qos
AccountingStorageHost=gadget
AccountingStorageType=accounting_storage/slurmdbd

JobAcctGatherFrequency=60
JobAcctGatherType=jobacct_gather/linux

DebugFlags=NO_CONF_HASH
SlurmctldDebug=3
SlurmctldLogFile=/var/log/slurmctld.log
SlurmdDebug=3
SlurmdLogFile=/var/log/slurm-llnl/slurmd.%n.log
SlurmSchedLogFile=/var/log/slurmsched.log
SlurmSchedLogLevel=0
#

#PARTITIONS
<% 
#node_string = ''
@partitions.each do |partition, data|
   if !partition.eql? "id" # skips the required 'id' node in the data bag
    node_string = ''  # clears the string
    data_nodes = data['Nodes'] # grabs the Nodes attribute of the json
    data_nodes.each do |data_node| # loop all the Nodes
      node_string << data_node # append the nodes to a string and append comma at the end 
      node_string << ','
    end
    node_string.chop! if node_string.end_with? ','  # strip the trailing comma
%>
PartitionName=<%= data['PartitionName'] %> Default=<%= data['Default'] %> DefaultTime=<%= data['DefaultTime'] %> MaxTime=<%= data['MaxTime'] %> Nodes=<%= node_string %> PreemptMode=<%= data['PreemptMode'] %> Priority=<%= data['Priority'] %> QOS=<%= data['QOS'] %> State=<%= data['State'] %>
<%
  end
end 
%>

# NODES
<% 
@cluster_nodes.each do |cluster_node, data|
   if !cluster_node.eql? "id"
    feature_string = ''  # clears the string
    feature_nodes = data['Feature'] # grabs the Feature attribute of the json
    feature_nodes.each do |feature_node| # loop all the Features
      feature_string << feature_node # append the features to a string and append comma at the end 
      feature_string << ','
    end
    feature_string.chop! if feature_string.end_with? ','  # strip the trailing comma
%>
NodeName=<%= data['NodeName'] %> Sockets=<%= data['Sockets'] %> CoresPerSocket=<%= data['CoresPerSocket'] %> Weight=<%= data['Weight'] %> Feature=<%= feature_string %>
<%
  end
end 
%>

